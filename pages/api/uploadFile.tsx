import { doc, getFirestore, setDoc } from 'firebase/firestore';
import { ref, uploadBytesResumable } from 'firebase/storage';
import { firebase, storage } from '../../firebase/firebase';
import { v4 as uuidv4 } from 'uuid';

import { Dispatch, SetStateAction } from 'react';
import { UploadableFile } from '../uploader';
import { getAuth } from 'firebase/auth';
import { Sermon, sermonConverter } from '../../types/Sermon';

interface uploadFileProps {
  file: UploadableFile;
  setFile: Dispatch<SetStateAction<UploadableFile | undefined>>;

  setUploadProgress: Dispatch<SetStateAction<string | undefined>>;

  title: string;
  subtitle: string;
  date: Date;
  description: string;
  speaker: Array<string>;
  scripture: string;
  topic: Array<string>;
}

const uploadFile = (props: uploadFileProps) => {
  getAuth();
  const db = getFirestore(firebase);
  const id = uuidv4();
  const sermonRef = ref(storage, `sermons/${id}`);
  // const sermonRef = ref(storage, `sermons/${file.name}`);
  const uploadTask = uploadBytesResumable(sermonRef, props.file.file);
  const sermonData: Sermon = {
    title: props.title,
    subtitle: props.subtitle,
    dateMillis: props.date.getTime(),
    description: props.description,
    speaker: props.speaker,
    scripture: props.scripture,
    topic: props.topic,
    key: sermonRef.name,
  };
  uploadTask.on(
    'state_changed',
    (snapshot) => {
      const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
      props.setUploadProgress(`${Math.round(progress)}%`);
      switch (snapshot.state) {
        case 'paused':
          break;
        case 'running':
          break;
      }
    },
    (error) => {
      props.setUploadProgress(`Error: ${error}`);
    },
    async () => {
      // With autogenerated id
      // addDoc(collection(db, 'sermons'), sermonData);
      // with custom id so it doesnt duplicate upload
      try {
        await setDoc(
          doc(db, 'sermons', id).withConverter(sermonConverter),
          sermonData
        );
        props.setUploadProgress('Uploaded!');
      } catch (error) {
        props.setUploadProgress(`Error: ${error}`);
      }
    }
  );
};
export default uploadFile;
